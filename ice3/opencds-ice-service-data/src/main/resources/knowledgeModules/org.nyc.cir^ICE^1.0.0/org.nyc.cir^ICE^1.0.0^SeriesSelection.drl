/**
 * Copyright (C) 2019 New York City Department of Health and Mental Hygiene, Bureau of Immunization
 * Contributions by HLN Consulting, LLC
 *
 * This program is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version. You should have received a copy of the GNU Lesser
 * General Public License along with this program. If not, see <http://www.gnu.org/licenses/> for more
 * details.
 *
 * The above-named contributors (HLN Consulting, LLC) are also licensed by the New York City
 * Department of Health and Mental Hygiene, Bureau of Immunization to have (without restriction,
 * limitation, and warranty) complete irrevocable access and rights to this project.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; THE
 *
 * SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING,
 * BUT NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS, IF ANY, OR DEVELOPERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES, OR OTHER LIABILITY OF ANY KIND, ARISING FROM, OUT OF, OR IN CONNECTION WITH
 * THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * For more information about this software, see http://www.hln.com/ice or send
 * correspondence to ice@hln.com.
 */

package org.cdsframework.ice.v1_1_0

import java.util.Collection
import java.util.Date
import java.util.Iterator
import java.util.List
import java.util.ArrayList
import java.util.Set
import org.drools.spi.KnowledgeHelper
import org.joda.time.LocalDate;
import org.opencds.vmr.v1_0.internal.EvalTime
import org.opencds.vmr.v1_0.internal.EvaluatedPerson
import org.cdsframework.ice.service.DiseaseImmunity
import org.cdsframework.ice.service.DoseStatus
import org.cdsframework.ice.service.ICEFactTypeFinding
import org.cdsframework.ice.service.ICELogicHelper
import org.cdsframework.ice.service.Recommendation
import org.cdsframework.ice.service.RecommendationStatus
import org.cdsframework.ice.service.Schedule
import org.cdsframework.ice.service.Season
import org.cdsframework.ice.service.SeriesRules
import org.cdsframework.ice.supportingdatatmp.SupportedFactConcept
import org.cdsframework.ice.service.TargetDose
import org.cdsframework.ice.service.TargetSeries
import org.cdsframework.ice.service.TargetSeriesSelection
import org.cdsframework.ice.service.TargetSeriesSelection.SeriesSelectionStatus
import org.cdsframework.ice.util.TimePeriod
import org.cdsframework.ice.util.TimePeriod.DurationType
import org.cdsframework.ice.service.Vaccine

global java.util.Date evalTime
global org.cdsframework.ice.service.Schedule schedule
global java.util.Date patientAgeTimeOfInterest


import function org.joda.time.LocalDate.fromDateFields


///////////////////////////////////////////////////////////// Influenza-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

rule "SeriesSelection: DUMMY catch-all Influenza season rule, 2 dose-series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason == $sss)		
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesRules.seriesName == "Influenza2DoseSeries", selectedSeries == false, 
			targetSeason == $sss)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


// If there is only one Influenza series for the season, just select it for forecasting. This could happen, for example, if no season was defined
// and the default season parameters are used
rule "SeriesSelection: Select Only Influenza Series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason == $sss)		
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", targetSeason == $sss, $tsid : targetSeriesIdentifier)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", targetSeason == $sss, targetSeriesIdentifier != $tsid)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


// If the patient is < 9 years of age and none of the 1-dose influenza series conditions are not met (via other rules), then 2-dose series applies
rule "SeriesSelection: For the Influenza 2017-2018, 2016-2017, 2015-2016, 2014-2015, 2013-2014 or 2012-2013 season if the patient < 9yrs and all 2-dose series conditions met, then 2-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 110
	agenda-group "customSeriesSelectionRules"
	activation-group "InfluenzaSeries6mto9yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, seriesSelectionSeason != null, 
			seriesSelectionSeason.seasonName == "20152016InfluenzaSeason" || seriesSelectionSeason.seasonName == "20142015InfluenzaSeason" || 
				seriesSelectionSeason.seasonName == "20132014InfluenzaSeason" || seriesSelectionSeason.seasonName == "20122013InfluenzaSeason", 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason != null && targetSeason == $sss)
		// Get the "current" season for series selection
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesRules.seriesName == "Influenza2DoseSeries", selectedSeries == false, 
			targetSeason == $sss)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") < 0)			
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);			
end


// For the Influenza 2014-2015 season, if the patient is >= 6months and < 9 years of age, then the 1-dose series applies if the following condition is met:
//     c) The patient received at least 1 dose of seasonal influenza vaccine during the 8/1/2013-6/30/2014 influenza vaccine season
rule "SeriesSelection: For the Influenza 2014-2015 season if the patient < 9yrs and 3rd 1-dose series condition met, then 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	agenda-group "customSeriesSelectionRules"
	activation-group "InfluenzaSeries6mto9yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null, seriesSelectionSeason.seasonName == "20142015InfluenzaSeason", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason != null && targetSeason == $sss)
		// Determine and make note of the "current" season for series selection
		$season : Season(seasonName == "20142015InfluenzaSeason", isDefinedBySeriesTableRules() == true, $seasonDefStart : fullySpecifiedSeasonStartDate, $seasonDefEnd : fullySpecifiedSeasonEndDate)
		// Pick the TargetSeries that is actually in the 2014-2015 season, not just using the 2014-2015 season rules (which would be after 2014-2015 defined dates)	
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesRules.seriesName == "Influenza1DoseSeries", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $seasonEndDate : targetSeason.fullySpecifiedSeasonEndDate, 
			$seasonStartDate.compareTo($seasonDefStart) == 0 && $seasonEndDate.compareTo($seasonDefEnd) == 0, $tsid : targetSeriesIdentifier)
		// Determine and make note of the prior "2013-2014" season; if 1 or more valid doses during 2013-2014, 1-dose series applies
		$ts2013 : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason.seasonName == "20132014InfluenzaSeason")
		accumulate($tsthis : TargetDose(isValid == true) from $ts2013.targetDoses; $countValid : count($tsthis); $countValid >= 1)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);				
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);	
end


// For the Influenza 2013-2014 season, if the patient is >= 6months and < 9 years of age then the 1-dose series applies if the following condition is met:
//     b) The patient received at least 2 doses of seasonal influenza vaccine prior to July 2010 and at least one dose of monovalent 2009 H1N1 vaccine
rule "SeriesSelection: For the Influenza 2012-2013, 2013-2014 or 2014-2015 season if the patient < 9yrs and 2nd 1-dose series condition met, then 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	agenda-group "customSeriesSelectionRules"
	activation-group "InfluenzaSeries6mto9yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, seriesSelectionSeason != null, 
			seriesSelectionSeason.seasonName == "20142015InfluenzaSeason" || seriesSelectionSeason.seasonName == "20132014InfluenzaSeason" || seriesSelectionSeason.seasonName == "20122013InfluenzaSeason", 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason != null && targetSeason == $sss)
		// Determine and make note of the "current" season for series selection
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesRules.seriesName == "Influenza1DoseSeries", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $tsid : targetSeriesIdentifier)

		$currentAndPriorSeasonsInfluenzaSeasons : List() from accumulate($tsInfluenzaThis : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", 
			 targetSeason != null && targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate) || targetSeriesIdentifier == $tsid), collectList($tsInfluenzaThis))
		$allh1n12009Seasons : List() from accumulate($thisH1N1Series : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.890",
			targetSeason != null && targetSeason.seasonName == "2009H1N1Season", selectedSeries == true), collectList($thisH1N1Series))
		accumulate($tdpriorCondition2 : TargetDose(isValid == true, administrationDate < "01-Jul-2010") from getAllDosesAcrossListOfTargetSeries($currentAndPriorSeasonsInfluenzaSeasons);
			$countPriorInfluenzaDosesCondition2 : count($tdpriorCondition2); $countPriorInfluenzaDosesCondition2 >= 2)
		accumulate($tdpriorH1N1Condition2 : TargetDose(isValid == true) from getAllDosesAcrossListOfTargetSeries($allh1n12009Seasons);
			$countPriorH1N1DosesCondition2 : count($tdpriorH1N1Condition2);	$countPriorH1N1DosesCondition2 >= 1)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);				
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


// For the Influenza 2013-2014 season, if the patient is < 9 years of age then the 1-dose series applies if the following condition is met:
//    a) The patient received at least 2 doses of seasonal influenza vaccine during prior influenza seasons, with at least one dose since July 2010
rule "SeriesSelection: For the Influenza 2012-2013, 2013-2014, 2014-2015 season if the patient < 9yrs and 1st 1-dose series condition met, then 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	agenda-group "customSeriesSelectionRules"
	activation-group "InfluenzaSeries6mto9yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, seriesSelectionSeason != null, 
			seriesSelectionSeason.seasonName == "20142015InfluenzaSeason" || seriesSelectionSeason.seasonName == "20132014InfluenzaSeason" || seriesSelectionSeason.seasonName == "20122013InfluenzaSeason", 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason == $sss)
		// Determine which season we're looking at now for series selection
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesRules.seriesName == "Influenza1DoseSeries", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $tsid : targetSeriesIdentifier)
		//	The patient received at least 2 doses of seasonal influenza vaccine during prior influenza seasons, with at least one dose since July 2010
		$priorSeasonsInfluenzaSeasons : List() from accumulate($tsInfluenzaThis : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", 
			targetSeason != null && targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate)), collectList($tsInfluenzaThis))
		accumulate($tdprior: TargetDose(isValid == true, $shotDateCondition1 : administrationDate) from getAllDosesAcrossListOfTargetSeries($priorSeasonsInfluenzaSeasons);
			$latestInfluenzaDoseDateFromPriorSeasons : maxDate($shotDateCondition1), $countPriorDoses : count($tdprior); 
			$latestInfluenzaDoseDateFromPriorSeasons != null && LocalDate.fromDateFields((Date) $latestInfluenzaDoseDateFromPriorSeasons).compareTo(new LocalDate(2010, 7, 1)) >= 0 && 
				$countPriorDoses >=2)
		// The patient is < 9 years of age
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


// For the Influenza 2015-2016 season, if the patient is < 9 years of age then the 1-dose series applies if the following condition is met:
// The child received at least 2 doses of seasonal influenza vaccine during any prior influenza seasons.
rule "SeriesSelection: For the Influenza 2015-2016, 2016-2017 and 2017-2018 seasons if the patient < 9yrs and at least 2 doses of seasonal influenza vaccine during any prior influenza seasons, then 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	agenda-group "customSeriesSelectionRules"
	activation-group "InfluenzaSeries6mto9yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, seriesSelectionSeason != null, 
			seriesSelectionSeason.seasonName == "20152016InfluenzaSeason", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason == $sss)
		// Determine which season we're looking at now for series selection
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesRules.seriesName == "Influenza1DoseSeries", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $tsid : targetSeriesIdentifier)
		//	The patient received at least 2 doses of seasonal influenza vaccine during prior influenza seasons
		$priorSeasonsInfluenzaSeasons : List() from accumulate($tsInfluenzaThis : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", 
			targetSeason != null && targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate)), collectList($tsInfluenzaThis))
		accumulate($tdprior: TargetDose(isValid == true, $shotDateCondition1 : administrationDate) from getAllDosesAcrossListOfTargetSeries($priorSeasonsInfluenzaSeasons);
			$countPriorDoses : count($tdprior);	$countPriorDoses >=2)
		// The patient is < 9 years of age
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


// If the patient is >= 9 and < 10 years of age and 2-dose influenza series conditions are not met (see next rule), then 1-dose series applies
rule "SeriesSelection: For the Influenza 2012-2013, 2013-2014, 2014-2015, 2015-2016, 2016-2017, or 2017-2018 season if patient >= 9yrs and < 10yrs and 1-dose series conditions are met, then 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 110
	agenda-group "customSeriesSelectionRules"
	activation-group "InfluenzaSeries9to10yrSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, seriesSelectionSeason != null, 
			seriesSelectionSeason.seasonName == "20152016InfluenzaSeason" || seriesSelectionSeason.seasonName == "20142015InfluenzaSeason" || seriesSelectionSeason.seasonName == "20132014InfluenzaSeason" || 
			seriesSelectionSeason.seasonName == "20122013InfluenzaSeason", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesRules.seriesName == "Influenza1DoseSeries", selectedSeries == false, targetSeason == $sss)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") >= 0 && 
			TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") < 0)						
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);				
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);	
end


// For the Influenza 2015-2016, if the patient is >= 9 and < 10 years of age then the 2-dose influenza series applies if all of the following three conditions are met:
//	* The patient received a dose of influenza at < 9 years of age during the current influenza vaccine season 
// 	* The patient DID NOT receive at least 2 doses of seasonal influenza vaccine during prior influenza seasons, with at least one dose since July 2010
// 	* The patient DID NOT receive at least 2 doses of seasonal influenza vaccine prior to July 2010 and at least one dose of monovalent 2009 H1N1 vaccine
// Otherwise, the 1-dose series applies
rule "SeriesSelection: For the Influenza 2012-2013, 2013-2014 or 2014-2015 season if patient >= 9yrs and < 10yrs and all 2-dose series conditions met, then 2-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	agenda-group "customSeriesSelectionRules"
	activation-group "InfluenzaSeries9to10yrSelectionCheck"	
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, seriesSelectionSeason != null, 
			seriesSelectionSeason.seasonName == "20142015InfluenzaSeason" || seriesSelectionSeason.seasonName == "20132014InfluenzaSeason" || seriesSelectionSeason.seasonName == "20122013InfluenzaSeason", 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason == $sss)
		// Determine and make note of the 2-Dose TargetSeries for this season
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesRules.seriesName == "Influenza2DoseSeries", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $tsid : targetSeriesIdentifier)
		//
		// Condition: the patient DID NOT receive at least 2 doses of seasonal influenza vaccine during prior influenza seasons, with at least one dose since July 2010
		///
		$priorSeasonsInfluenza : List() from accumulate($tsInfluenzaThis : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", 
			targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate)), collectList($tsInfluenzaThis))
		accumulate($tdpriorCondition1 : TargetDose(isValid == true, $shotDateCondition1 : administrationDate) from getAllDosesAcrossListOfTargetSeries($priorSeasonsInfluenza); 
			$latestInfluenzaDoseDateFromPriorSeasons : maxDate($shotDateCondition1), $countPriorInfluenzaDosesCondition1 : count($tdpriorCondition1); 
			$latestInfluenzaDoseDateFromPriorSeasons == null || (! ($countPriorInfluenzaDosesCondition1 >= 2 && $latestInfluenzaDoseDateFromPriorSeasons != null &&
				LocalDate.fromDateFields((Date) $latestInfluenzaDoseDateFromPriorSeasons).compareTo(new LocalDate(2010, 7, 1)) >= 0)))
		//
		// Condition: the patient DID NOT receive at least 2 doses of seasonal influenza vaccine prior to July 2010 (i.e. - across current season and prior season) and at least one
		// dose of monovalent 2009 H1N1 vaccine
		// 			
		$currentAndPriorSeasonsInfluenza : List() from accumulate($tsInfluenzaThis2 : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", 
			targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate) || targetSeriesIdentifier == $tsid), collectList($tsInfluenzaThis2))
		$allh1n12009Season : List() from accumulate($thisH1N1Series : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.890",
		 	// (selected series is redundant since H1N1 VG has should have done through select series first, but this is a safeguard)
			targetSeason != null && targetSeason.seasonName == "2009H1N1Season", selectedSeries == true), collectList($thisH1N1Series))	
		$countPriorH1N1Doses : Number() from accumulate($td2009h1n1shot: TargetDose(isValid == true) from getAllDosesAcrossListOfTargetSeries($allh1n12009Season), count($td2009h1n1shot))
 		accumulate($tdpriorCondition2 : TargetDose(isValid == true, administrationDate < "01-Jul-2010") from getAllDosesAcrossListOfTargetSeries($currentAndPriorSeasonsInfluenza); 
			$countPriorInfluenzaDosesCondition2 : count($tdpriorCondition2); (! ($countPriorInfluenzaDosesCondition2 >= 2 && $countPriorH1N1Doses >= 1)) == true)
		//
		// The patient is >= 9 and < 10 years of age and received a valid dose < 9 years of age *during the current influeza season*
		//
		$earliestInfluenzaDoseDateThisSeason : Date() from accumulate($tdcurr : TargetDose(isValid == true, $doseDatesThisSeason : administrationDate) from $ts.targetDoses, 
			minDate($doseDatesThisSeason))
		$person : EvaluatedPerson()
		eval($earliestInfluenzaDoseDateThisSeason != null && TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, $earliestInfluenzaDoseDateThisSeason, "9y") < 0 && 
			TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") >= 0 && 
			TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "patient age of interest " + patientAgeTimeOfInterest + "; SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end


// For the Influenza 2015-2016 season, if the patient is >= 9 and < 10 years of age then the 2-dose influenza series applies if all of the following three conditions are met:
//	* The patient received a dose of influenza at < 9 years of age during the current influenza vaccine season 
// 	* The patient DID NOT receive at least 2 doses of seasonal influenza vaccine during prior influenza seasons
// Otherwise, the 1-dose series applies
rule "SeriesSelection: For the Influenza 2015-2016, 2016-2017 and 2017-2018 season if patient >= 9yrs and < 10yrs and all 2-dose series conditions met, then 2-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	agenda-group "customSeriesSelectionRules"
	activation-group "InfluenzaSeries9to10yrSelectionCheck"	
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, seriesSelectionSeason != null,
			seriesSelectionSeason.seasonName == "20152016InfluenzaSeason", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason == $sss)
		// Determine and make note of the 2-Dose TargetSeries for this season
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesRules.seriesName == "Influenza2DoseSeries", selectedSeries == false, 
			targetSeason == $sss, $seasonStartDate : targetSeason.fullySpecifiedSeasonStartDate, $tsid : targetSeriesIdentifier)
		//
		// Condition: the patient DID NOT receive at least 2 doses of seasonal influenza vaccine during prior influenza seasons
		///
		$priorSeasonsInfluenza : List() from accumulate($tsInfluenzaThis : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", 
			targetSeason.fullySpecifiedSeasonStartDate.isBefore($seasonStartDate)), collectList($tsInfluenzaThis))
		accumulate($tdpriorCondition1 : TargetDose(isValid == true, $shotDateCondition1 : administrationDate) from getAllDosesAcrossListOfTargetSeries($priorSeasonsInfluenza); 
			$countPriorInfluenzaDosesCondition1 : count($tdpriorCondition1); (! ($countPriorInfluenzaDosesCondition1 >= 2)))
		//
		// The patient is >= 9 and < 10 years of age and received a valid dose < 9 years of age *during the current influeza season*
		//
		$earliestInfluenzaDoseDateThisSeason : Date() from accumulate($tdcurr : TargetDose(isValid == true, $doseDatesThisSeason : administrationDate) from $ts.targetDoses, 
			minDate($doseDatesThisSeason))
		$person : EvaluatedPerson()
		eval($earliestInfluenzaDoseDateThisSeason != null && TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, $earliestInfluenzaDoseDateThisSeason, "9y") < 0 && 
			TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "9y") >= 0 && 
			TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "patient age of interest " + patientAgeTimeOfInterest + "; SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end



// If the patient is >= 10 years of age then the 1-dose influenza series applies 
rule "SeriesSelection: For the Influenza 2012-2013, 2013-2014, 2014-2015, 2015-2016, 2016-2017 and 2017-2018 seasons and patient >= 10yrs, 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, seriesSelectionSeason != null, 
				seriesSelectionSeason.seasonName == "20152016InfluenzaSeason" || seriesSelectionSeason.seasonName == "20132014InfluenzaSeason" || 
				seriesSelectionSeason.seasonName == "20122013InfluenzaSeason" || seriesSelectionSeason.seasonName == "20142015InfluenzaSeason", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.800", seriesRules.seriesName == "Influenza1DoseSeries", selectedSeries == false, 
			targetSeason == $sss)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") >= 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "patient age of interest " + patientAgeTimeOfInterest + "; SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end


///////////////////////////////////////////////////////////// H1N1-Specific Series Selection Rules Start Here ////////////////////////////////////////////////////////////

// If there is only one Influenza series for the season, just select it for forecasting. This could happen, for example, if no season was defined
// and the default season parameters are used
rule "SeriesSelection: Select Only H1N1 Series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.890", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			$sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.890", selectedSeries == true, targetSeason == $sss)		
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.890", targetSeason == $sss, $tsid : targetSeriesIdentifier)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.890", targetSeason == $sss, targetSeriesIdentifier != $tsid)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);			
end


// If the patient is <10 years of age then the 1-dose h1n1 series applies 
rule "SeriesSelection: For the H1N1 2009 season, patient < 10yrs, 2-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 110
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.890", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null && seriesSelectionSeason.seasonName == "2009H1N1Season", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.890", selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.890", seriesRules.seriesName == "H1N12DoseSeries", selectedSeries == false, 
			targetSeason == $sss)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end


// If the patient is >= 10 years of age then the 1-dose h1n1 series applies 
rule "SeriesSelection: For the H1N1 2009 season, patient >= 10yrs and number of effective doses <= 1 at last shot date, 1-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 110
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.890", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null && seriesSelectionSeason.seasonName == "2009H1N1Season", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.890", selectedSeries == true, targetSeason == $sss)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.890", seriesRules.seriesName == "H1N11DoseSeries", selectedSeries == false, 
			targetSeason == $sss)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, patientAgeTimeOfInterest, "10y") >= 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end


// If the patient is <10 years of age then the 1-dose h1n1 series applies 
rule "SeriesSelection: For the H1N1 2009 season, if effective number of doses >=2 on the date of the last shot, the 2-dose series applies" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 120
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.890", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS, 
			seriesSelectionSeason != null && seriesSelectionSeason.seasonName == "2009H1N1Season", $sss : seriesSelectionSeason)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.890", selectedSeries == true, targetSeason == $sss)
		$td : TargetDose(doseNumberInSeries == 2, isValid == true, $administrationDate : administrationDate)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.890", seriesRules.seriesName == "H1N12DoseSeries", selectedSeries == false,
			targetSeason == $sss, containsTargetDose($td))
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, $administrationDate, "10y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);		
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		update($tss);
		update($ts);
end


///////////////////////////////////////////////////////////// HPV-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

/**
The HPV 2-dose series applies if any one of the following is true:
  1) If the patient < 15 years old and no doses have been administered
  2) If dose 1 was administered and is CVX 165 and is given to a patient >= 9 years - 4 days old and < 15 years old
  3) If dose 1 was administered and is CVX 165 and is given to a patient >= 9 years - 4 days old and < 15 years old 
    + and target dose 2 is valid for the HPV 2-dose series, the HPV 2-dose series applies.
    + target dose 2 is invalid or accepted for the HPV 2-dose series, but valid for HPV 3-dose series, the HPV 3-dose series applies. 
    + target dose 2 is invalid or accepted for BOTH the HPV 2-dose series and HPV 3-dose series, the HPV 2-dose series applies.
  4) Otherwise, the HPV 3-dose series applies.
*/

// By default, select the 3-dose series
rule "SeriesSelection.HPV: Default to 3-dose series if 2-dose series not otherwise selected" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", selectedSeries == true))
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesRules.seriesName == "HPV3DoseSeries")
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


// If the patient < 15 years old and no doses have been administered, the HPV 2-Dose Series applies
rule "SeriesSelection.HPV: Select 2-dose series if patient < 15yrs and no doses have been adminstered in any series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 10
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", selectedSeries == true))
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesRules.seriesName == "HPV2DoseSeries", $numberOfDoses : determineNumberOfDosesAdministeredInSeries)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", determineNumberOfDosesAdministeredInSeries() > 0)
		$person : EvaluatedPerson()
		eval($numberOfDoses == 0 && TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, evalTime, "15y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
end


// If there is only 1 dose which was administered and is CVX 165 and is given to a patient >= 9y-4d old and < 15 years old, the HPV 2-Dose Series applies. 
// This rule must have a lower salience than the rules which take into account that either the 2-dose series or 3-dose series might have 2 valid doses; those rules will be considered first. 
rule "SeriesSelection.HPV: Select 2-Dose Series if 1-dose administered to a patient < 15yrs of age" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 10
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", selectedSeries == true))
		$td : TargetDose(doseNumberInSeries == 1, isValid == true, $tdAdministrationDate : administrationDate)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesRules.seriesName == "HPV2DoseSeries", containsTargetDose($td), 
			$numberOfDoses : determineNumberOfDosesAdministeredInSeries)
		$person : EvaluatedPerson()
		eval($numberOfDoses == 1 && TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, $tdAdministrationDate, "15y") < 0)	
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
end


rule "SeriesSelection.HPV: Select 2-dose series if first dose administered < 15yrs of age, Valid target dose 2 in 2-dose series, and no prior Valid target dose 2 earlier in 3-dose series" ruleflow-group "SeriesSelection" 
	dialect "mvel"
	salience 30
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", selectedSeries == true))
		$ts2series : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesRules.seriesName == "HPV2DoseSeries")
		$ts3series : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesRules.seriesName == "HPV3DoseSeries")
		$td2dose : TargetDose(associatedTargetSeries == $ts2series, doseNumberInSeries == 2, isValid == true, $tdAdministrationDate: administrationDate)
		not TargetDose(associatedTargetSeries == $ts3series, administrationDate < $tdAdministrationDate, doseNumberInSeries == 2, isValid == true)
		TargetDose(associatedTargetSeries == $ts2series, doseNumberInSeries == 1, isValid == true, $tdAdministrationDateDose1 : administrationDate)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, $tdAdministrationDateDose1, "15y") < 0)	
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts2series);
		$ts2series.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts2series.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts2series);
end


rule "SeriesSelection.HPV: Select 3-dose series if first dose administered < 15yrs of age, Valid target dose 2 in 3-dose series, and no prior Valid target dose 2 on same day or before in 2-dose series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 30
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", selectedSeries == true))
		$ts2series : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesRules.seriesName == "HPV2DoseSeries")
		$ts3series : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.840", seriesRules.seriesName == "HPV3DoseSeries")
		TargetDose(associatedTargetSeries == $ts3series, doseNumberInSeries == 2, isValid == true, $tdAdministrationDate: administrationDate)
		not TargetDose(associatedTargetSeries == $ts2series, administrationDate <= $tdAdministrationDate, doseNumberInSeries == 2, isValid == true)
		TargetDose(associatedTargetSeries == $ts3series, doseNumberInSeries == 1, isValid == true, $tdAdministrationDateDoseOne : administrationDate)
		$person : EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, $tdAdministrationDateDoseOne, "15y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts3series);
		$ts3series.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts3series.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts3series);	
end
 

///////////////////////////////////////////////////////////// Zoster-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Since there is only one Zoster series, just select it for forecasting. Note that if additional series are defined, this rule will just pick one.
rule "SeriesSelection.SelectOnlyZosterSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	activation-group "ZosterSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.860", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.860", selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.860", $tsid : targetSeriesIdentifier)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end

///////////////////////////////////////////////////////////// Polio-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

rule "SeriesSelection.SelectOnlyPolioSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	activation-group "PolioSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.400", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.400", selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.400", $tsid : targetSeriesIdentifier)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


///////////////////////////////////////////////////////////// Meningococcal-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

rule "SeriesSelection.SelectOnlyMCVSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	activation-group "MCVSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.830", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.830", selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.830", $tsid : targetSeriesIdentifier)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end

///////////////////////////////////////////////////////////// Pneumococcal-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Since there is only one Pneumococcal series, just select it for forecasting. Note that if additional series are defined, this rule will just pick one.
rule "SeriesSelection.SelectOnlyPneumococcalSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.750", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.750", selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.750")
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
end


// Pneumococcal: The Adult Series applies if the patient is >= 5 years old
rule "SeriesSelection.SelectAdultPneumococcalSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 10
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.750", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.750", selectedSeries == true)		
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.750", seriesRules.seriesName == "PneumococcalAdultSeries", selectedSeries == false)
		$person: EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, evalTime, "5y") >= 0)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


// Pneumococcal: The Child Series applies if the patient is < 5 years old
rule "SeriesSelection.SelectChildPneumococcalSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 10
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.750", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.750", selectedSeries == true)		
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.750", seriesRules.seriesName == "PneumococcalChildSeries", selectedSeries == false)
		$person: EvaluatedPerson()
		eval(TimePeriod.compareElapsedTimePeriodToDateRange($person.demographics.birthTime, evalTime, "5y") < 0)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


///////////////////////////////////////////////////////////// Meningococcal B Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Default Mening B series if no shots administered - select MenB 4C 2-Dose Series if no shots administered (and by default)
rule "SeriesSelection(MenB): Select MenB 4C 2-Dose Series by default" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", selectedSeries == true)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenB4C2DoseSeries", isSeriesComplete() == false)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
end


// If one or more of the series is complete, pick it; leave it to default series selection rules to determine which series was complete first
rule "SeriesSelection(MenB): Select Complete Series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", selectedSeries == true)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_POSTPROCESS);
		update($tss);
		update($ts);
end


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// START: If dose 1 is CVX 163 (Meningococcal B 4C, OMV (Bexsero)), then the MenB 4C 2-dose series applies.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "ABSTRACT SeriesSelection(MenB): Select MenB 4C 2-Dose Series if valid dose 1" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 5
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", selectedSeries == true)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenB4C2DoseSeries", determineNumberOfDosesAdministeredInSeries() >= 1)
		not TargetDose(associatedTargetSeries == $ts, vaccineComponent.cdsConceptName != "ICE163", administeredShotNumberInSeries == $ts.numberOfShotsAdministeredInSeries)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end

rule "SerieSelection(MenB): Select MenB 4C 2-dose series if target dose 1 (CVX 162) is Valid; series _is_ complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB 4C 2-Dose Series if valid dose 1"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 5
	when
		TargetSeries(this == $ts, isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_POSTPROCESS);
		update($tss);
		update($ts);
end

rule "SerieSelection(MenB): Select MenB 4C 2-dose series if target dose 1 (CVX 162) is Valid; series is _not_ complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB 4C 2-Dose Series if valid dose 1"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 5
	when
		TargetSeries(this == $ts, isSeriesComplete() == false)
		not TargetSeries(this != $ts, seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
end

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// END: If dose 1 is CVX 163 (Meningococcal B 4C, OMV (Bexsero)), then the MenB 4C 2-dose series applies.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// START: If dose 1 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and
//     * Invalid for the MenB FHbp 2-dose Series, but valid for MenB FHbp 3-dose Series, the MenB FHbp 3-dose series applies.
//     * Valid for the MenB FHbp 2-dose Series AND valid for MenB FHbp 3-dose Series, the MenB FHbp 2-dose series applies.
//
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////
// Sub-bullet 1: If target dose 1 is (CVX 162 [Meningococcal B FHbp, recombinant (Trumenba)]) and Invalid for the FHbp 2-dose Series, but valid for FHbp 3-dose Series, the FHbp 3-dose series applies.
////////////////////////////
rule "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 3-dose series if target dose 1 (CVX 162) is invalid for FHbp 2-dose series but valid for the FHbp 3-dose series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 5
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", selectedSeries == true)
		$ts2doseSeries : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenBFHbp2DoseSeries", selectedSeries == false, determineNumberOfDosesAdministeredInSeries() == 0)
		$ts3doseSeries : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenBFHbp3DoseSeries", selectedSeries == false, determineNumberOfDosesAdministeredInSeries() >= 1)
		not TargetDose(associatedTargetSeries == $ts3doseSeries, vaccineComponent.cdsConceptName != "ICE162", administeredShotNumberInSeries == $ts2doseSeries.numberOfShotsAdministeredInSeries)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts3doseSeries);

end

rule "SerieSelection(MenB): Select MenB FHbp 3-dose series if target dose 1 (CVX 162) is Invalid for FHbp 2-dose series, valid for FHbp 3-dose series; FHbp 3-dose series _is_ complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 3-dose series if target dose 1 (CVX 162) is invalid for FHbp 2-dose series but valid for the FHbp 3-dose series"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 5
	when
		// This should never occur based on existing rules
		TargetSeries(this == $ts3doseSeries, isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts3doseSeries);
		$ts3doseSeries.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts3doseSeries.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_POSTPROCESS);
		update($tss);
		update($ts3doseSeries);
end

rule "SerieSelection(MenB): Select MenB FHbp 3-dose series if target dose 1 (CVX 162) is Invalid for FHbp 2-dose series, valid for FHb3 3-dose series; FHbp 3-dose series is _not_ complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 3-dose series if target dose 1 (CVX 162) is invalid for FHbp 2-dose series but valid for the FHbp 3-dose series"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 5
	when
		// This should always occur based on existing rules
		TargetSeries(this == $ts3doseSeries, isSeriesComplete() == false)
		not TargetSeries(this != $ts3doseSeries, seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts3doseSeries);
		$ts3doseSeries.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts3doseSeries.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts3doseSeries);
end

////////////////////////////
// END Sub-bullet 1: If target dose 1 is (CVX 162 [Meningococcal B FHbp, recombinant (Trumenba)]) and Invalid for the FHbp 2-dose Series, but valid for FHbp 3-dose Series, the FHbp 3-dose series applies.
////////////////////////////

////////////////////////////
// Sub-bullet 2: If target dose 1 (CVX 162 [Meningococcal B FHbp, recombinant (Trumenba)]) is Valid for the MenB FHbp 2-dose Series AND Valid for MenB FHbp 3-dose Series, the MenB FHbp 2-dose series applies.
////////////////////////////
rule "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 2-dose series if target dose 1 (CVX 162) is Valid for both FHbp 2-dose series and FHbp 3-dose series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 5
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", selectedSeries == true)
		$ts2doseSeries : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenBFHbp2DoseSeries", selectedSeries == false, determineNumberOfDosesAdministeredInSeries() == 1)
		$ts3doseSeries : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenBFHbp3DoseSeries", selectedSeries == false, determineNumberOfDosesAdministeredInSeries() == 1)
		not TargetDose(associatedTargetSeries == $ts2doseSeries, vaccineComponent.cdsConceptName != "ICE162", administeredShotNumberInSeries == $ts2doseSeries.numberOfShotsAdministeredInSeries)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts2doseSeries);
end

rule "SerieSelection(MenB): Select MenB FHbp 2-dose series if dose 1 (CVX 162) is Valid for both FHbp 2-dose series/FHbp 3-dose series; FHbp 2-dose series _is_ complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 2-dose series if target dose 1 (CVX 162) is Valid for both FHbp 2-dose series and FHbp 3-dose series"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 5
	when
		// This should never occur based on existing rules
		TargetSeries(this == $ts2doseSeries, isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts2doseSeries);
		$ts2doseSeries.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts2doseSeries.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_POSTPROCESS);
		update($tss);
		update($ts2doseSeries);
end

rule "SerieSelection(MenB): Select MenB FHbp 2-dose series if dose 1 (CVX 162) is Valid for both FHbp 2-dose series/FHb3 3-dose series; FHbp 2-dose series is _not_ complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 2-dose series if target dose 1 (CVX 162) is Valid for both FHbp 2-dose series and FHbp 3-dose series"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 5
	when
		// This should always occur based on existing rules
		TargetSeries(this == $ts2doseSeries, isSeriesComplete() == false)
		not TargetSeries(this != $ts2doseSeries, seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts2doseSeries);
		$ts2doseSeries.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts2doseSeries.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts2doseSeries);
end
////////////////////////////
// END Sub-bullet 2: If target dose 1 (CVX 162 [Meningococcal B FHbp, recombinant (Trumenba)]) is Valid for the MenB FHbp 2-dose Series AND Valid for MenB FHbp 3-dose Series, the MenB FHbp 2-dose series applies.
////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// END: If target dose 1 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and
// 	* Invalid for the MenB FHbp 2-dose Series, but valid for MenB FHbp 3-dose Series, the MenB FHbp 3-dose series applies.
// 	* Valid for the MenB FHbp 2-dose Series AND valid for MenB FHbp 3-dose Series, the MenB FHbp 2-dose series applies.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// START: If dose 1 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba) and
//    * target dose 2 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and valid for the MenB FHbp 2-dose series, the MenB FHbp 2-dose series applies.
//    * target dose 2 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and invalid for the MenB FHbp 2-dose series, but valid for MenB FHbp 3-dose series, the MenB FHbp 3-dose series applies.
//    * target dose 2 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and invalid for BOTH the MenB FHbp 2-dose series and MenB FHbp 3-dose series, the MenB FHbp 2-dose series applies.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////
// Sub-bullet 1: If dose 1 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba) and target dose 2 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and valid for the MenB FHbp 2-dose series, 
// the MenB FHbp 2-dose series applies.
////////////////////////////
rule "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 2-dose series if dose 1 is CVX 162; target dose 2 (CVX 162) is Valid in FHbp 2-dose series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 10
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", selectedSeries == true)
		$ts2doseSeries : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenBFHbp2DoseSeries", selectedSeries == false, determineNumberOfDosesAdministeredInSeries() >= 2)
		not TargetDose(associatedTargetSeries == $ts2doseSeries, vaccineComponent.cdsConceptName != "ICE162", administeredShotNumberInSeries == $ts2doseSeries.numberOfShotsAdministeredInSeries) 
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "ABSTRACT SeriesSelection: TargetSeries " + $ts2doseSeries);
end

rule "SerieSelection(MenB): Select MenB FHbp 2-dose series if dose 1 is CVX 162; target dose 2 (CVX 162) is Valid for FHbp 2-dose series; FHbp 2-dose series _is_ complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 2-dose series if dose 1 is CVX 162; target dose 2 (CVX 162) is Valid in FHbp 2-dose series"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 10
	when
		// This should always occur based on existing rules
		TargetSeries(this == $ts2doseSeries, isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts2doseSeries);
		$ts2doseSeries.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts2doseSeries.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_POSTPROCESS);
		update($tss);
		update($ts2doseSeries);
end

rule "SerieSelection(MenB): Select MenB FHbp 2-dose series if dose 1 is CVX 162; target dose 2 (CVX 162) is Valid for FHbp 2-dose series; FHbp 2-dose series is _not_ complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 2-dose series if dose 1 is CVX 162; target dose 2 (CVX 162) is Valid in FHbp 2-dose series"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 10
	when
		// This should never occur based on existing rules
		TargetSeries(this == $ts2doseSeries, isSeriesComplete() == false)
		not TargetSeries(this != $ts2doseSeries, seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts2doseSeries);
		$ts2doseSeries.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts2doseSeries.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts2doseSeries);
end

////////////////////////////
// END Sub-bullet 1
////////////////////////////

////////////////////////////
// Sub-bullet 2: If dose 1 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and target dose 2 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and invalid for the MenB FHbp 2-dose series, '
// but valid for MenB FHbp 3-dose series, the MenB FHbp 3-dose series applies.
////////////////////////////
rule "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 3-dose series if dose 1 is CVX 162 and target dose 2 (CVX 162) is Invalid for FHbp 2-dose series but Valid for FHbp 3-dose series" 
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 10
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", selectedSeries == true)
		$ts2doseSeries : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenBFHbp2DoseSeries", determineNumberOfDosesAdministeredInSeries() == 1)
		$ts3doseSeries : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenBFHbp3DoseSeries", determineNumberOfDosesAdministeredInSeries() >= 2)
		not TargetDose(associatedTargetSeries == $ts2doseSeries, vaccineComponent.cdsConceptName != "ICE162", administeredShotNumberInSeries == $ts3doseSeries.numberOfShotsAdministeredInSeries)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "ABSTRACT SeriesSelection: TargetSeries " + $ts3doseSeries);
end

rule "SerieSelection(MenB): Select MenB FHbp 3-dose series if dose 1 is CVX 162; target dose 2 (CVX 162) is Invalid for FHbp 2-dose series, Valid for FHbp 3-dose series; FHBp 3-dose series _is_ complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 3-dose series if dose 1 is CVX 162 and target dose 2 (CVX 162) is Invalid for FHbp 2-dose series but Valid for FHbp 3-dose series"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 10
	when
		TargetSeries(this == $ts3doseSeries, isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts3doseSeries);
		$ts3doseSeries.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts3doseSeries.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_POSTPROCESS);
		update($tss);
		update($ts3doseSeries);
end

rule "SerieSelection(MenB): Select MenB FHbp 3-dose series if dose 1 is CVX 162; target dose 2 (CVX 162) is Invalid for FHbp 2-dose series, Valid for FHbp 3-dose series; FHbp 3-dose series is _not_ complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 3-dose series if dose 1 is CVX 162 and target dose 2 (CVX 162) is Invalid for FHbp 2-dose series but Valid for FHbp 3-dose series"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 10
	when
		TargetSeries(this == $ts3doseSeries, isSeriesComplete() == false)
		not TargetSeries(this != $ts3doseSeries, seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts3doseSeries);
		$ts3doseSeries.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts3doseSeries.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts3doseSeries);
end

////////////////////////////
// END Sub-bullet 2
////////////////////////////

////////////////////////////
// START Sub-bullet 3: If dose 1 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and target dose 2 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and invalid for BOTH the MenB FHbp 2-dose series 
// and MenB FHbp 3-dose series, the MenB FHbp 2-dose series applies. Neither series will be complete
////////////////////////////
rule "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 2-dose series if dose 1 is CVX 162, target dose 2 (CVX 162) is Invalid in both FHbp 2-dose series/3-dose series" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 10
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", selectedSeries == true)
		$ts2doseSeries : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenBFHbp2DoseSeries", determineNumberOfDosesAdministeredInSeries() == 1)
		$ts3doseSeries : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenBFHbp3DoseSeries", determineNumberOfDosesAdministeredInSeries() == 1)
		not TargetDose(associatedTargetSeries == $ts2doseSeries, vaccineComponent.cdsConceptName != "ICE162", administeredShotNumberInSeries == $ts2doseSeries.numberOfShotsAdministeredInSeries)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "ABSTRACT SeriesSelection: TargetSeries " + $ts2doseSeries);
end

// This should not happen based on current rules - 2-dose series is not complete until 2-doses have been administered
rule "SeriesSelection(MenB): Select MenB FHbp 2-dose series if dose 1 is CVX 162, target dose 2 (CVX 162) is Invalid in both MenB FHbp 2-dose series/3-dose series but series is complete"
		extends "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 2-dose series if dose 1 is CVX 162, target dose 2 (CVX 162) is Invalid in both FHbp 2-dose series/3-dose series"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 10
	when
		// This should not happen based on current rules
		TargetSeries(this == $ts2doseSeries, isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts2doseSeries);
		$ts2doseSeries.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts2doseSeries.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_POSTPROCESS);
		update($tss);
		update($ts2doseSeries);
end

rule "SeriesSelection(MenB): Select MenB FHbp 2-dose series if dose 1 is CVX 162, target dose 2 (CVX 162) is Invalid in both MenB FHbp 2-dose series/3-dose series, series is not complete, and there are no other series complete"
		extends "ABSTRACT SeriesSelection(MenB): Select MenB FHbp 2-dose series if dose 1 is CVX 162, target dose 2 (CVX 162) is Invalid in both FHbp 2-dose series/3-dose series"
	ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 10
	when
		TargetSeries(this == $ts2doseSeries, isSeriesComplete() == false)
		not TargetSeries(this != $ts2doseSeries, seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts2doseSeries);		
		$ts2doseSeries.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts2doseSeries.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts2doseSeries);
end

////////////////////////////
// END sub-bullet 3
////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// END: If dose 1 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba) and
// 	* target dose 2 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and valid for the MenB FHbp 2-dose series, the MenB FHbp 2-dose series applies.
//	* target dose 2 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and invalid for the MenB FHbp 2-dose series, but valid for MenB FHbp 3-dose series, the MenB FHbp 3-dose series applies.
// 	* target dose 2 is CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and invalid for BOTH the MenB FHbp 2-dose series and MenB FHbp 3-dose series, the MenB FHbp 2-dose series applies. 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// START: If both CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and CVX 163 (Meningococcal B 4C, OMV (Bexsero)) are on the patient record, then the series in which the Meningococcal B vaccine last 
// administered applies. Ignore the reported shot of the other Meningococcal B vaccine.
//    * If CVX 163 (Meningococcal B 4C, OMV (Bexsero)) is the last shot administered on the patient record, then the MenB 4C 2-dose series applies.
//    * If CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) is the last shot administered on the patient record, then either the MenB FHbp 2-dose series applies or the MenB FHbp 3-dose series applies. 
//      (See preceding Series Selection Rules to determine whether the MenB FHbp 2-dose series or MenB FHbp 3-dose series applies.)
//
// In addition, if a CVX 162 and CV 163 were administered on the same day, the MenB4C2DoseSeries should be selected if both CVX 162 and CVX 163 were administered on the same day, unless a 
// Trumenba series would have been completed by the Trumenba shot. Specifically:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Sub-bullet 1: If both CVX 162 and CVX 163 are on the patient record; CVX 163 is the last shot administered
rule "ABSTRACT SeriesSelection(MenB): Select MenB 4C 2-dose series if both CVX 162 and CVX 163 present, and latest shot date administered is CVX 163" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 30
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", selectedSeries == true)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", seriesRules.seriesName == "MenB4C2DoseSeries", selectedSeries == false)
		TargetDose(associatedTargetSeries == $ts, vaccineComponent.cdsConceptName == "ICE162")
		TargetDose(associatedTargetSeries == $ts, vaccineComponent.cdsConceptName == "ICE163", $tdLatestDateUniqueId : uniqueId, $tdLatestAdministrationDate : administrationDate)   // administeredShotNumberInSeries == $ts.numberOfShotsAdministeredInSeries)
		not TargetDose(associatedTargetSeries == $ts, uniqueId != $tdLatestDateUniqueId, administrationDate > $tdLatestAdministrationDate)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "ABSTRACT SeriesSelection: TargetSeries " + $ts);		
end

rule "SeriesSelection(MenB): Select MenB 4C 2-dose series if both CVX 162 and CVX 163 present, last shot administered is CVX 163, and series is complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB 4C 2-dose series if both CVX 162 and CVX 163 present, and latest shot date administered is CVX 163" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 30
	when
		TargetSeries(this == $ts, isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_POSTPROCESS);
		update($tss);
		update($ts);
end

rule "SeriesSelection(MenB): Select MenB 4C 2-dose series if both CVX 162 and CVX 163 present, last shot administered is CVX 163, series is not complete, and there are no other series complete" 
		extends "ABSTRACT SeriesSelection(MenB): Select MenB 4C 2-dose series if both CVX 162 and CVX 163 present, and latest shot date administered is CVX 163" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 30
	when
		TargetSeries(this == $ts, isSeriesComplete() == false)
		not TargetSeries(this != $ts, seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.835", isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
end

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// END: If both CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) and CVX 163 (Meningococcal B 4C, OMV (Bexsero)) are on the patient record, then the series in which the Meningococcal B vaccine last 
// administered applies. Ignore the reported shot of the other Meningococcal B vaccine.
//    * If CVX 163 (Meningococcal B 4C, OMV (Bexsero)) is the last shot administered on the patient record, then the MenB 4C 2-dose series applies.
//    * If CVX 162 (Meningococcal B FHbp, recombinant (Trumenba)) is the last shot administered on the patient record, then either the MenB FHbp 2-dose series applies or the MenB FHbp 3-dose series applies. 
//      (See preceding Series Selection Rules to determine whether the MenB FHbp 2-dose series or MenB FHbp 3-dose series applies.)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////// Hib-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Hib: If the Series that was selected is Not Complete but the other Series is Complete, select the other (completed) Series instead
rule "SeriesSelection(Hib): If the Series that was selected is Not Complete but the other Series is Complete, select the other (completed) Series instead" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.300", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		$tsNotSelected : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.300", selectedSeries == false, isSeriesComplete() == true)		
		$tsSelected : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.300", targetSeriesIdentifier != $tsNotSelected.targetSeriesIdentifier, selectedSeries == true, isSeriesComplete() == false)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection(Hib) change to *completed* TargetSeries " + $tsNotSelected);
		$tsSelected.setSelectedSeries(false);		
		$tsNotSelected.setSelectedSeries(true);
		$tss.setSelectedSeriesName($tsNotSelected.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_POSTPROCESS);
		update($tsNotSelected);
		update($tsSelected);
		update($tss);
end


rule "SeriesSelection.SelectByDefaultHib4DoseSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	activation-group "HibSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.300", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.300", selectedSeries == true)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.300", seriesRules.seriesName == "Hib4DoseSeries",	selectedSeries == false)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end


rule "SeriesSelection.SelectHibOMPSeriesIfFirstDoseHibOMPBefore7MonthsAndOnlyOneValidDoseTotal" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 200
	agenda-group "customSeriesSelectionRules"
	activation-group "HibSeriesSelectionCheck"
	when
	//Hib OMP Series
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.300", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.300", selectedSeries == true)
		$td : TargetDose(doseNumberInSeries == 1, isValid == true, $administrationDate : administrationDate, vaccineComponent.cdsConceptName == "ICE49", $td1UniqueId : uniqueId)
		$ts: TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.300", $sn : seriesRules.seriesName == "HibOMPSeries", selectedSeries == false, 
			containsTargetDose($td), $effectiveDoses : determineEffectiveNumberOfDosesInSeries, numberOfShotsAdministeredInSeries == 1)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.300", seriesRules.seriesName != $sn, 
			getValidShotByDoseNumber(1) != null && getValidShotByDoseNumber(1).getAdministrationDate() < $administrationDate)
		$person : EvaluatedPerson($birthDate : demographics.birthTime)
		eval($effectiveDoses == 1 && TimePeriod.calculateElapsedTimePeriod($birthDate, $administrationDate, DurationType.MONTHS).isLessThan(new TimePeriod(7, DurationType.MONTHS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts.getSeriesName());
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.getSeriesName());
		update($ts);	
end


rule "SeriesSelection.SelectHibOMPSeriesIfTwoDosesHibOMPOneBefore7MonthsOtherBefore12Months" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 300
	agenda-group "customSeriesSelectionRules"
	activation-group "HibSeriesSelectionCheck"
	when
	//Hib OMP Series
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.300", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.300", selectedSeries == true)
		$td1 : TargetDose(doseNumberInSeries == 1, isValid == true, $administrationDate1 : administrationDate, vaccineComponent.cdsConceptName == "ICE49")
		$td2 : TargetDose(doseNumberInSeries == 2, isValid == true, $administrationDate2 : administrationDate, vaccineComponent.cdsConceptName == "ICE49", $td2UniqueId : uniqueId)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.300", $sn : seriesRules.seriesName == "HibOMPSeries",	selectedSeries == false, 
			containsTargetDose($td1), containsTargetDose($td2))
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.300", seriesRules.seriesName != $sn, 
			getValidShotByDoseNumber(2) != null && getValidShotByDoseNumber(2).getAdministrationDate() < $administrationDate2)
		$person : EvaluatedPerson($birthDate : demographics.birthTime)
		eval(TimePeriod.calculateElapsedTimePeriod($birthDate, $administrationDate1, DurationType.MONTHS).isLessThan(new TimePeriod(7, DurationType.MONTHS)) && 
			TimePeriod.calculateElapsedTimePeriod($birthDate, $administrationDate2, DurationType.MONTHS).isLessThan(new TimePeriod(12, DurationType.MONTHS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end



////////////////////////////////////////////////////////// Hep A-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////


// Override general rule which picks the doses with the least number to complete the series
rule "SeriesSelection.HepADoNOTSelectAlreadyCompleteSeriesWithFewestDosesIfExistsAndOtherSeriesPreviouslySelected" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	activation-group "SeriesSelectionFewestDoses"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.810", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		$ts : TargetSeries(selectedSeries == true, seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.810")
	then
		String _RULENAME = kcontext.rule.name;
		// Don't do anything - overriding general rule which picks least series
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
end


// Select 2-dos series by default. Note that additional series selection rules for Hep A are not required since the rules "switch" from 2-dose to 3-dose during evaluation 
// in all circumstances when needed.
rule "SeriesSelection.SelectByDefaultHepA2DoseSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	activation-group "HepASeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.810", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.810", selectedSeries == true)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.810", seriesRules.seriesName == "HepA2DoseChildAdultSeries",	selectedSeries == false)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end


///////////////////////////////////////////////////////////// Hep B-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

rule "SeriesSelection: Select already completed series that was completed on the same date and with the most doses if different completed series was previously selected" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.100", $ssvg : seriesSelectionVaccineGroup,
			seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS || seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_POSTPROCESS, $sss : seriesSelectionSeason)
		$ts1 : TargetSeries(seriesRules.vaccineGroup == $ssvg, $id1 : targetSeriesIdentifier, selectedSeries == true, targetSeason == null || targetSeason == $sss, $seriesComplete1 : isSeriesComplete(), 
			$lastNecessaryShotAdministered1 : getValidShotByDoseNumber(seriesRules.numberOfDosesInSeries), $ts1numberOfDosesInSeries : seriesRules.numberOfDosesInSeries)
		$ts2 : TargetSeries(seriesRules.vaccineGroup == $ssvg, targetSeriesIdentifier != $id1, selectedSeries == false, targetSeason == null || targetSeason == $sss, $seriesComplete2 : isSeriesComplete(), 
			$ts2numberOfDosesInSeries : seriesRules.numberOfDosesInSeries, $ts2numberOfDosesInSeries > $ts1numberOfDosesInSeries, $lastNecessaryShotAdministered2 : getValidShotByDoseNumber(seriesRules.numberOfDosesInSeries))
		eval($seriesComplete1 == true && $seriesComplete2 == true && $lastNecessaryShotAdministered1 != null && $lastNecessaryShotAdministered2 != null && 
			TimePeriod.differenceInDays($lastNecessaryShotAdministered1.getAdministrationDate(), $lastNecessaryShotAdministered2.getAdministrationDate()) == 0)
	then
		String _RULENAME = kcontext.rule.name;
		$ts1.setSelectedSeries(false);
		$ts2.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts2.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($ts1);
		update($ts2);
		update($tss);
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "Previously Selected TargetSeries Retracted for Already Complete Series: " + $ts2 + "; " + $lastNecessaryShotAdministered1 + "; " + $lastNecessaryShotAdministered2);
end


rule "SeriesSelection(Hep B).SelectHepBNewbornSeriesAtLeastOneShotAdministered" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	when	
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", selectedSeries == true)
		$td : TargetDose(administeredShotNumberInSeries == 1)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesRules.seriesName == "HepBNewbornSeries", selectedSeries == false, containsTargetDose($td))
		$person : EvaluatedPerson()
		eval(TimePeriod.calculateElapsedTimePeriod($person.demographics.birthTime, $td.administrationDate, DurationType.DAYS).isLessThan(new TimePeriod(28, DurationType.DAYS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);
end


rule "SeriesSelection(Hep B).SelectHepBNewBornSeriesNoShot" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	no-loop true
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", selectedSeries == true)	
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesRules.seriesName == "HepBNewbornSeries", selectedSeries == false, targetDoses.empty)
		$person : EvaluatedPerson()
		$evalTime: EvalTime()
		eval(TimePeriod.calculateElapsedTimePeriod($person.demographics.birthTime, $evalTime.evalTimeValue,	DurationType.DAYS).isLessThan(new TimePeriod(28, DurationType.DAYS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);
end


rule "SeriesSelection(Hep B).SelectHepBChildAdultSeriesAtLeastOneShotAdministered" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	no-loop true
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", selectedSeries == true)
		$td : TargetDose(administeredShotNumberInSeries == 1)
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesRules.seriesName == "HepBChildAdultSeries", selectedSeries == false, containsTargetDose($td))
		$person : EvaluatedPerson()
		eval(TimePeriod.calculateElapsedTimePeriod($person.demographics.birthTime, $td.administrationDate, DurationType.DAYS).isGreaterThanEqualTo(new TimePeriod(28, DurationType.DAYS)))	
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end


rule "SeriesSelection(Hep B).SelectHepBChildAdultSeriesNoShot" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	no-loop true
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", selectedSeries == true)	
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesRules.seriesName == "HepBChildAdultSeries", selectedSeries == false, targetDoses.empty)
		$person : EvaluatedPerson()
		$evalTime: EvalTime()
		eval(TimePeriod.calculateElapsedTimePeriod($person.demographics.birthTime, $evalTime.evalTimeValue, DurationType.DAYS).isGreaterThanEqualTo(new TimePeriod(28, DurationType.DAYS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);
end


rule "SeriesSelection(Hep B).SelectHepBAdultSeriesNoShot" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	activation-group "HepBSeriesSelectionCheck"
	no-loop true
	salience 100
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", selectedSeries == true)	
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesRules.seriesName == "HepBChildAdultSeries", selectedSeries == false, targetDoses.empty)
		$person : EvaluatedPerson()
		$evalTime: EvalTime()
		eval(TimePeriod.calculateElapsedTimePeriod($person.demographics.birthTime, $evalTime.evalTimeValue, DurationType.DAYS).isGreaterThanEqualTo(new TimePeriod(18, DurationType.YEARS)))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);
end


rule "ABSTRACT SeriesSelection(Hep B): Patient is >= 18y-4d and (valid) Dose 1 is CVX 189" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 100
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", selectedSeries == true)	
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", seriesRules.seriesName == "HepBAdult2DoseSeries", selectedSeries == false)
		$td : TargetDose(associatedTargetSeries == $ts, doseNumberInSeries == 1, isValid == true)
		$person : EvaluatedPerson($dtDateAtAge : TimePeriod.addTimePeriod(demographics.birthTime, "18y-4d"))
		not TargetDose(associatedTargetSeries != $ts, isValid == true, administrationDate < $dtDateAtAge)  
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "ABSTRACT SeriesSelection: TargetSeries " + $ts);
end


rule "SeriesSelection(Hep B): Select Adult 2-dose Series is patient >= 18y-4d, 1 dose, and no additional shots on record" 
		extends "ABSTRACT SeriesSelection(Hep B): Patient is >= 18y-4d and (valid) Dose 1 is CVX 189" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	when
		TargetSeries(targetSeriesIdentifier == $ts.targetSeriesIdentifier, numberOfShotsAdministeredInSeries == 1)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
end


rule "SeriesSelection(Hep B): For patient >= 18y-4d and >= 1 dose and additional shots on record, select the Child/Adult Series if it has more doses than the Adult Series" 
		extends "ABSTRACT SeriesSelection(Hep B): Patient is >= 18y-4d and (valid) Dose 1 is CVX 189" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	when
		$tsAdult : TargetSeries(targetSeriesIdentifier == $ts.targetSeriesIdentifier, numberOfShotsAdministeredInSeries > 1, $numberAdultDoses : determineNumberOfDosesAdministeredInSeries())
		$tsChildAdult : TargetSeries(seriesRules.seriesName == "HepBChildAdultSeries", seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", numberOfShotsAdministeredInSeries > 1, 
			determineNumberOfDosesAdministeredInSeries() > $numberAdultDoses)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $tsChildAdult);
		$tsChildAdult.setSelectedSeries(true);
		$tss.setSelectedSeriesName($tsChildAdult.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($tsChildAdult);
end


rule "SeriesSelection(Hep B): For patient >= 18y-4d and >= 1 dose and additional shots on record, select the Adult Series if it has greater than or equal the number of doses as the Child/Adult Series" 
		extends "ABSTRACT SeriesSelection(Hep B): Patient is >= 18y-4d and (valid) Dose 1 is CVX 189" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	when
		$tsAdult : TargetSeries(targetSeriesIdentifier == $ts.targetSeriesIdentifier, numberOfShotsAdministeredInSeries > 1, $numberAdultDoses : determineNumberOfDosesAdministeredInSeries())
		$tsChildAdult : TargetSeries(seriesRules.seriesName == "HepBChildAdultSeries", seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", numberOfShotsAdministeredInSeries > 1, 
			determineNumberOfDosesAdministeredInSeries() <= $numberAdultDoses)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $tsAdult);
		$tsAdult.setSelectedSeries(true);
		$tss.setSelectedSeriesName($tsAdult.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($tsAdult);
end


// Select the Child/Adult 3-dose series if it and it is complete - 2-dose series will be re-selected by general selection rules if it completed first
rule "SeriesSelection(Hep B): Select Child/Adult Series if it is complete" 
		extends "ABSTRACT SeriesSelection(Hep B): Patient is >= 18y-4d and (valid) Dose 1 is CVX 189" ruleflow-group "SeriesSelection"
	dialect "mvel"
	agenda-group "customSeriesSelectionRules"
	salience 110
	when
		$tsChildAdult : TargetSeries(seriesRules.seriesName == "HepBChildAdultSeries", seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.100", isSeriesComplete() == true)
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $tsChildAdult);
		$tsChildAdult.setSelectedSeries(true);
		$tss.setSelectedSeriesName($tsChildAdult.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_IN_POSTPROCESS);
		update($tss);
		update($tsChildAdult);	
end


///////////////////////////////////////////////////////////// DTP-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

///////
// If the patient is >= 7 years of age and has zero doses on record prior to age 7 years, then the 3-dose series applies; otherwise the 5-dose series applies.
///////

rule "SeriesSelection.SelectDTP5DoseSeriesIf3DoseSeriesNotSelected" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	activation-group "DTPSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.200", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.200", selectedSeries == true))
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.200", seriesRules.seriesName == "DTP5DoseSeries")
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


rule "SeriesSelection.Select3DoseDTPSeriesIfNoShotsPriorTo7YrsAnd7YrsOldOrOlder" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 110
	agenda-group "customSeriesSelectionRules"
	activation-group "DTPSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.200", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.200", selectedSeries == true))
		$person : EvaluatedPerson($birthDate : demographics.birthTime, $ageAt7yrs : TimePeriod.addTimePeriod(demographics.birthTime, "7y"))
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.200", seriesRules.seriesName == "DTP3DoseSeries")
		not TargetDose(associatedTargetSeries == $ts, administrationDate < $ageAt7yrs)
		eval(TimePeriod.calculateElapsedTimePeriod($birthDate, evalTime, DurationType.YEARS).isGreaterThan(new TimePeriod(7, DurationType.YEARS), true))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);	
end


///////////////////////////////////////////////////////////// MMR-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Since there is only one MMR series, just select it for forecasting. Note that if additional series are defined, this rule will just pick one.
rule "SeriesSelection.SelectOnlyMMRSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	activation-group "MMRSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.500", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.500", selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.500")
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
end


///////////////////////////////////////////////////////////// Varicella-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// Since there is only one Varicella series, just select it for forecasting. Note that if additional series are defined, this rule will just pick one.
rule "SeriesSelection.SelectOnlyVaricellaSeries" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 100
	agenda-group "customSeriesSelectionRules"
	activation-group "VaricellaSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.600", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.600", selectedSeries == true))		
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.600")
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		$tss.setSeriesSelectionStatus(SeriesSelectionStatus.SERIES_SELECTION_COMPLETE);
		update($tss);
		update($ts);
end


///////////////////////////////////////////////////////////// Rotavirus-Specific Series Selection Rules Start Here /////////////////////////////////////////////////////////////

// If no doses have been administered, then select the Rotavirus 3-dose series
rule "SeriesSelection.SelectRotavirus3DoseSeriesDefault" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 140
	agenda-group "customSeriesSelectionRules"
	activation-group "RotavirusSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.820", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.820", selectedSeries == true))	
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.820", seriesRules.seriesName == "Rotavirus3DoseSeries")
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end

// If CVX 116 (Rotavirus RV5 (RotaTeq, 3 dose)), CVX 74 (Rotavirus) or CVX 122 (Rotavirus NOS) is administered, then the 3 dose series applies.
rule "SeriesSelection.SelectRotavirus3DoseSeriesIfCertainVaccinesAdministered" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 200
	agenda-group "customSeriesSelectionRules"
	activation-group "RotavirusSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.820", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.820", selectedSeries == true))		
		$td : TargetDose(isValid == true, isShotIgnoredForCompletionOfSeries() == false, 
			(vaccineComponent.cdsConceptName == "ICE116" || 
			  vaccineComponent.cdsConceptName == "ICE122" || 
			  vaccineComponent.cdsConceptName == "ICE74"))
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.820", seriesRules.seriesName == "Rotavirus3DoseSeries", containsTargetDose($td))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end


// If dose 1 is CVX 119 (Rotavirus RV1 (Rotarix, 2 dose)) then the 2 dose series applies
rule "SeriesSelection.SelectRotavirus2DoseSeriesIf1DoseRV1" ruleflow-group "SeriesSelection"
	dialect "mvel"
	salience 150
	agenda-group "customSeriesSelectionRules"
	activation-group "RotavirusSeriesSelectionCheck"
	when
		$tss : TargetSeriesSelection(seriesSelectionVaccineGroup == "VACCINE_GROUP_CONCEPT.820", seriesSelectionStatus == SeriesSelectionStatus.SERIES_SELECTION_IN_PROCESS)
		not (exists TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.820", selectedSeries == true))	
		$td : TargetDose(isValid == true, doseNumberInSeries == 1, vaccineComponent.cdsConceptName == "ICE119")
		$ts : TargetSeries(seriesRules.vaccineGroup == "VACCINE_GROUP_CONCEPT.820", seriesRules.seriesName == "Rotavirus2DoseSeries", containsTargetDose($td))
	then
		String _RULENAME = kcontext.rule.name;
		ICELogicHelper.logDRLDebugMessage(_RULENAME, "SeriesSelection: TargetSeries " + $ts);
		$ts.setSelectedSeries(true);
		$tss.setSelectedSeriesName($ts.seriesName);
		update($ts);	
end



/*****************************************************************************************************************************************************************************/
// 															General Purpose Functions for use in Accumulate and Collects
/*****************************************************************************************************************************************************************************/

function List getAllDosesAcrossListOfTargetSeries(List tss) {

	List tds = new ArrayList();
	if (tss == null) {
		return tds;
	}
	
	Iterator iter = tss.iterator();
	while (iter.hasNext()) {
		TargetSeries ts = (TargetSeries) iter.next();
		Collection tsd = ts.getTargetDoses();
		if (tsd != null) {
			Iterator ii = tsd.iterator();
			while (ii.hasNext()) {
				TargetDose td = (TargetDose) ii.next();
				tds.add(td);
			}
		}
	}
	
	return tds;
}

